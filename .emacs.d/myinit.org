#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent
* A Basic Settings
** Symlink Hack
   By default emacs will query the user asking whether it should follow the sym link to 
   the configuration files. This function creates a .emacs file which will prevent this 
   from happening.
   #+BEGIN_SRC emacs-lisp
     (defun symlinkhack ()
       (let ((fname "~/.emacs"))
         (if (not (file-exists-p fname))
             (with-temp-file fname
               (insert "(setq vc-follow-symlinks t)\n(load-file \"~/.emacs.d/init.el\")")))))

     (symlinkhack)
   #+END_SRC
** Follow links
   #+BEGIN_SRC emacs-lisp
     (setq vc-follow-symlinks t)   
   #+END_SRC

** GUI
   #+BEGIN_SRC emacs-lisp
     (scroll-bar-mode -1)
     (menu-bar-mode -1)
     (tool-bar-mode -1)
   #+END_SRC
** Mode line
   #+BEGIN_SRC emacs-lisp
    ;; Display both line and column numbers in mode line
    (setq line-number-mode t)
    (setq column-number-mode t)
   #+END_SRC

** Behaviour
   #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
    ;; Adds new lines  when moving cursor past the end of the file
    (setq next-line-add-newlines t)
    (setq inhibit-startup-message t)
    ;; Saves the current desktop (stuff that is loaded, window layout etc.)
    ;;   (desktop-save-mode 1)
    ;; don't jump when scrolling past bottom of screen
    (setq scroll-step 1)
   #+END_SRC

** Tabs
   #+BEGIN_SRC emacs-lisp
     (setq tab-width 4)
     (setq-default indent-tabs-mode nil) ;; Spaces rather than tabs
   #+END_SRC

** Move backup and autosave files to .emacs.d/{auto-save,backups}
   #+BEGIN_SRC emacs-lisp
   (setq auto-save-file-name-transforms
           `((".*" ,(concat user-emacs-directory "auto-save/") t))) 

   (setq backup-directory-alist
       `(("." . ,(expand-file-name
                  (concat user-emacs-directory "backups")))))
   #+END_SRC
** Fullscreen/Maximised
#+BEGIN_SRC emacs-lisp
     ;;(toggle-frame-fullscreen)
     (toggle-frame-maximized)
#+END_SRC
* Fonts
#+BEGIN_SRC emacs-lisp
  (set-default-font "mono 13" nil t)
  (if (string= system-name "yoga")
      (set-default-font "mono 14" nil t))
#+END_SRC
* Ace Window
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0))))))
  #+END_SRC

* Anaconda
Python ide-ness
Has an accompanying company mode which I'm using
#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :ensure t
  :hook python-mode
)

(use-package anaconda-eldoc-mode
  :hook python-mode
)
  

#+END_SRC
* Auto Package Update
  #+BEGIN_SRC emacs-lisp
    ;; Make packages update themselves
    (use-package auto-package-update
      :ensure t
      :config
      (setq auto-package-update-delete-old-versions t)
      (setq auto-package-update-hide-results t)
      (auto-package-update-maybe))
  #+END_SRC  

* Avy
  #+BEGIN_SRC emacs-lisp
    ;; Quick jump to character
    (use-package avy
      :disabled
      :ensure t
      :bind ("M-s" . avy-goto-word-1))
  #+END_SRC#+END_SRC

* Company
  http://company-mode.github.io/

  #+BEGIN_SRC emacs-lisp
    ;; Auto completion
    (use-package company
      :ensure t
      :bind
      (:map company-active-map
            ("M-n" . nil)
            ("M-p" . nil)
            ("C-n" . company-select-next)
            ("C-p" . company-select-previous))
      :config
      (global-company-mode t)
      (setq company-tooltip-limit 20)                        ;; completion list length
      (setq company-idle-delay .3)                           ;; delay before popup shows
      (setq company-echo-delay 0)                            ;; remove annoying blinking
      (setq company-begin-commands '(self-insert-command)))  ;; start autocompletion only after typing
  #+END_SRC

** Company Go
   #+BEGIN_SRC emacs-lisp
     (use-package company-go
     :ensure t
     :init
;;     (add-to-list 'company-backends 'company-go) ;; Why doesn't this work?
     
       (add-hook 'go-mode-hook
         (lambda ()
           (set (make-local-variable 'company-backends) '(company-go))
           (company-mode)))
           
     )
   #+END_SRC

** Company Elisp
   #+BEGIN_SRC emacs-lisp
   
   #+END_SRC

** Company Jedi
#+BEGIN_SRC emacs-lisp
;;   (use-package company-jedi
;;     :ensure t
;;     :init
;;       (add-hook 'python-mode-hook (lambda () (add-to-list 'company-backends 'company-jedi)))
;;       
;;   )

#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package company-anaconda
    :ensure t
     :init
       (add-hook 'python-mode-hook (lambda () (add-to-list 'company-backends 'company-anaconda)))
  )
#+END_SRC

* Counsel
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
    :ensure t
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))
  #+END_SRC

* Dumb Jump
    #+BEGIN_SRC emacs-lisp
      (use-package dumb-jump
        :ensure t
        :bind (("M-g o" . dumb-jump-go-other-window)
               ("M-g j" . dumb-jump-go)
               ("M-g i" . dumb-jump-go-prompt)
               ("M-g x" . dumb-jump-go-prefer-external)
               ("M-g z" . dumb-jump-go-prefer-external-other-window))
        :config (setq dumb-jump-selector 'ivy))
    #+END_SRC

* EShell
  #+BEGIN_SRC emacs-lisp
    ;; eshell
    (setq eshell-prompt-regexp "^[^#$\n]*[#$>] "
          eshell-prompt-function
          (lambda () "----> "))
            ;;(propertize "----> " 'face `(:foreground "yellow"))))
  #+END_SRC

* Evil Mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode t)
    (evil-set-initial-state 'term-mode 'emacs))
#+END_SRC
* Flycheck
Syntax checking
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t
        :init (global-flycheck-mode))
    #+END_SRC
* Geiser
** Emacs and scheme talk to each other
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :ensure t)
#+END_SRC
* Go Mode
  #+BEGIN_SRC emacs-lisp
    (use-package go-mode
      :ensure t
      :config
      (add-hook 'before-save-hook 'gofmt-before-save))
  #+END_SRC

* Htmlize
#+BEGIN_SRC emacs-lisp
  (use-package htmlize :ensure t)
#+END_SRC

* Hydra + Key Chords + My Bindings
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t
    :config
    (key-chord-mode 1)
    (setq key-chord-two-keys-delay 0.04))

  (use-package hydra :ensure t)

  ;; C-g 
  (key-chord-define-global "fr" 'keyboard-escape-quit)

  ;; window switching
  (key-chord-define-global "fd" 'next-multiframe-window)

  ;; search
  (key-chord-define-global "ds" 'swiper)

  ;; evil mode
  (key-chord-define-global "jk" 'evil-normal-state)

  ;; my hydra tree
  (key-chord-define-global "kl" 'hydra-top/body)


  (defhydra hydra-top (:color blue)
    "Top"
    ("b" hydra-buf/body "buf")
    ("f" hydra-file/body "file")
    ("h" help "help")
    ("p" hydra-proj/body "proj")
    ("q" query-replace "q-replace")
    ("t" hydra-shell/body "term")
    ("w" hydra-win/body "win")
    ("x" execute-extended-command "x")
    ("SPC" major-major "maj")
    ("RET" nil))

  (defun major-major () 
    (interactive)
    (pcase major-mode
      ('org-mode (hydra-org/body))
      ('lisp-interaction-mode (hydra-scratch/body))
      ('racket-mode (hydra-racket/body))
      ('python-mode (hydra-python/body))
      ))

  (defhydra hydra-file (:color blue)
    "File"
    ("f" counsel-find-file "find")
    ("s" save-buffer "save")
    ("RET" nil))

  (defhydra hydra-win (:color blue)
    "Win"
    ("b" split-window-below "split below")
    ("r" split-window-right "split right")
    ("d" delete-window "del")
    ("k" delete-other-windows "keep")
    ("s" ace-swap-window "swap")
    ("h" enlarge-window-horizontally "grow horiz" :color red)
    ("H" shrink-window-horizontally "shrink horiz" :color red)
    ("v" enlarge-window "grow vert" :color red)
    ("V" shrink-window "shrink vert" :color red)
    ("z" text-scale-increase "zoom" :color red)
    ("Z" text-scale-decrease "unzoom" :color red)
    ;; ("n" next-multiframe-window "next")
    ;; ("o" ace-window "other")
    ;; ("p" previous-multiframe-window "prev")
    ("RET" nil))

  (defhydra hydra-buf (:color blue)
    "Buf"
    ("k" kill-buffer "kill")
    ("b" ivy-switch-buffer "buf")
    ("RET" nil))

  (defhydra hydra-proj (:color blue)
    "Proj"
    ("f" projectile-find-file "file")
    ("RET" nil))

  (defhydra hydra-org (:color blue)
    "Org"
    ("b" org-metaleft "left")
    ("f" org-metaright "right")

    ("B" org-metaleft "left" :color red)
    ("F" org-metaright "right" :color red)

    ("c" org-ctrl-c-ctrl-c "C-c C-c")

    ("h" org-insert-heading-respect-content "heading")
    ("i" (progn (org-meta-return) (evil-insert 1)) "insert")


    ("l" org-toggle-latex-fragment "tog latex")
    ("n" org-narrow-to-subtree "narrow")
    ("w" widen "widen")
    ("t" hydra-org-table/body "tables" :exit t)
    ("." org-time-stamp "date")
    ("'" org-edit-special "edit")
    ("RET" nil))

  (defhydra hydra-org-table (:color blue)
    "Table"
    ("o" org-table-toggle-coordinate-overlays "overlay")
    ("c" org-table-insert-column "ins col")
    ("r" org-table-insert-row "ins row")
    ("i" org-table-iterate "iter")
  )

  (defhydra hydra-shell (:color blue)
    "Shell"
    ("a" (ansi-term "/bin/bash") "ansi")
    ("e" eshell "eshell")
    ("RET" nil)
  )

  (defhydra hydra-scratch (:color blue)
    ("e" eval-last-sexp "eval")
  )

  (defhydra hydra-python (:color blue)
    ("d" anaconda-mode-show-doc "doc")
    ("f" hydra-python/find/body "find") 
    ("s" run-python "repl") 
    ("b" python-shell-send-buffer "send buf")
  )

  (defhydra hydra-python/find (:color blue)
    ("a" anaconda-mode-find-assignments "assigs")
    ("d" anaconda-mode-find-definitions "defs")
    ("r" anaconda-mode-find-references "refs")
  )
#+END_SRC
* IBuffer
  #+BEGIN_SRC emacs-lisp
    ;; (defalias 'list-buffers 'ibuffer)
    ;; (setq ibuffer-default-sorting-mode 'major-mode)
  #+END_SRC
* Ido
  #+BEGIN_SRC emacs-lisp
    ;; (setq ido-enable-flex-matching t)
    ;; (setq ido-everywhere t)
    ;; (ido-mode 1)
  #+END_SRC

* Ivy
  #+BEGIN_SRC emacs-lisp
      (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "%d/%d ")
      (setq ivy-display-style 'fancy))
  #+END_SRC
  
* Javascript
- [[https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html][Setting up Emacs for JavaScript (part 1)]]
- [[https://emacs.cafe/emacs/javascript/setup/2017/05/09/emacs-setup-javascript-2.html][part 2]] 
- For xref-js2 you need the_silver_searcher on your os (in arch repo)
- For company-tern you need to install tern on your os
- sudo npm install -g tern
- [[https://atom.io/packages/atom-ternjs][Set up a .tern-config file for each project (example)]]
- [[http://ternjs.net/doc/manual.html#configuration][.tern-config docs]]

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
    (add-to-list 'interpreter-mode-alist '("node" . js2-mode)))

  (use-package js2-refactor
    :ensure t
    :init
    (add-hook 'js2-mode-hook #'js2-refactor-mode))

  ;; requires the_silver_searcher on your os 
  ;; (use-package xref-js2
  ;;   :ensure t
  ;;   :init
  ;;   (define-key js-mode-map (kbd "M-.") nil)
  ;;   (add-hook 'js2-mode-hook
  ;;             (lambda ()
  ;;               (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))

  (use-package 
    company-tern
    :ensure t
    :init
    (add-to-list 'company-backends 'company-tern)
    (add-hook 'js2-mode-hook (lambda ()
                             (tern-mode)
                             (company-mode)))
    ;;:config
    ;; keybindings are also used by xref-js2 so...
    ;;(define-key tern-mode-keymap (kbd "M-.") nil)
    ;;(define-key tern-mode-keymap (kbd "M-,") nil)
    )
#+END_SRC
* Jedi
WARNING! 
DON'T USE JEDI.EL WITH COMPANY.
USE COMPANY-JEDI INSTEAD
* Key Chord
  #+BEGIN_SRC emacs-lisp
  #+END_SRC

* Org Mode
** Links
   - [[https://orgmode.org/][Website]]
   - [[https://orgmode.org/org.html][Manual]]
   - [[https:orgmode.org/orgcard.pdf][orgcard]]
    
** Notes
*** LaTeX
    https://orgmode.org/worg/org-tutorials/org-latex-preview.html
**** Setup LaTeX preview for formulas
     https://orgmode.org/manual/Embedded-LaTeX.html
     1. Install latex on system
        e.g. the texlive-most pacman group
     2. Makes sure we have dvipng, dvisvgm or convert installed.
        They are included in texlive-most
     3. Toggle between ascii and latex with
        org-toggle-latex-fragment (C-c C-x C-l)
**** Tikz diagrams
- install ghostscript
***** convert: attempt to perform an operation not allowed by the security policy `PDF' @ error/constitute.c/IsCoderAuthorized/408.
- To fix this error it is necessary to change ImageMagick's security policy.
  - Open
    - /etc/ImageMagick/policy.xml
  - Comment out the line 
    - <policy domain="coder" rights="none" pattern="{PS,PS2,PS3,EPS,PDF,XPS}"/>
** Org Bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    ;; :bind
    ;; (:map org-mode-map
    ;;       ("C-x C-e" . org-babel-execute-src-block))
    :config
    (setq org-return-follows-link t
          org-confirm-babel-evaluate nil ;; don't prompt before evaluating src blocks
          org-html-doctype "html5"
          org-startup-indented t)

    ;; LaTeX SETUP
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5)
          org-latex-create-formula-image-program 'imagemagick)
    (add-to-list 'org-latex-packages-alist '("" "tikz" t))
    (add-to-list 'org-latex-packages-alist '("" "dsfont" t))

    ;; BABEL 
    (setq geiser-default-implementation 'racket)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (scheme . t) ;; scheme requires emacs geiser package 
       )))
#+END_SRC
* PDF Tools
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :config
      (pdf-tools-install))
  #+END_SRC

* Projectile
    #+BEGIN_SRC emacs-lisp
      ;; projectile
      (use-package projectile
        :ensure t
        :bind ("C-c p" . projectile-command-map)
        :config
        (setq projectile-global-mode t)
        (setq projectile-completion-system 'ivy))
    #+END_SRC

* Racket Mode
- [[https://www.racket-mode.com/][racket mode manual]]
    #+BEGIN_SRC emacs-lisp
      (use-package racket-mode
        :ensure t
        :init
        (add-to-list 'auto-mode-alist '("\\.rkt\\'" . racket-mode))
        :config
        (setq tab-always-indent 'complete))
        (defhydra hydra-racket (:color blue)
          ("r" racket-run "run")
          ("c" comment-or-uncomment-region "com")
          ("RET" nil))
    #+END_SRC
    
* Rust Mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :config 
    (setq rust-format-on-save t))

    ;; needed for compatablity between flycheck and cargo projects
    (use-package flycheck-rust
    :ensure t
    :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC
* Swiper
  #+BEGIN_SRC emacs-lisp
    (use-package swiper
    :ensure t
    ;; :bind (("C-s" . swiper)
    ;;        ("C-r" . swiper)
    ;;        ("C-c C-r" . ivy-resume)
    ;;        ("M-x" . counsel-M-x)
    ;;        ("C-x C-f" . counsel-find-file))
     :config
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (setq swiper-goto-start-of-match t)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))
  #+END_SRC
  
* Themes
#+BEGIN_SRC emacs-lisp
  ;; (use-package color-theme :ensure t) ;; provides a load of themes
  (use-package gruvbox-theme :ensure t)

  ;;(use-package zenburn-theme 
  ;;   :ensure t
  ;;   :init
  ;;   (setq zenburn-override-colors-alist
  ;;         '(("zenburn-bg" . "#111111"))))

  ;;(use-package jazz-theme :ensure t)
  ;; (use-package monokai-theme :ensure t)
  ;; (use-package darktooth-theme :ensure t)
  ;;(use-package dracula-theme :ensure t)
  ;; (use-package color-theme-sanityinc-tomorrow 
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'sanityinc-tomorrow-eighties t)) ;; the t prevents the warning message on startup
#+END_SRC

* Try
  #+BEGIN_SRC emacs-lisp
    (use-package try :ensure t)
  #+END_SRC

* Which Key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config
      (which-key-mode))
  #+END_SRC

























