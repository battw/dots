#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent
* TODO
- check error reporting for python
- python hydra is expecting anaconda
- C, C++, Rust, Go, Racket, Python, Javascript, GDScript(?), GDB.
- Sort LSP wherever it is appropriate.
- Decent goto definition
- Goto docs.
- A better function to prevent a buffer, of a given major mode, switching to evil normal mode.
- Check out Helm.
- Get Dired to stay in a single buffer
- Tidy up mode line
* A Basic Settings
** Symlink Hack
   By default emacs will query the user asking whether it should follow the sym link to 
   the configuration files. This function creates a .emacs file which will prevent this 
   from happening.
   #+BEGIN_SRC emacs-lisp
     (defun symlinkhack ()
       (let ((fname "~/.emacs"))
         (if (not (file-exists-p fname))
             (with-temp-file fname
               (insert "(setq vc-follow-symlinks t)\n(load-file \"~/.emacs.d/init.el\")")))))

     (symlinkhack)
   #+END_SRC
** Follow links
   #+BEGIN_SRC emacs-lisp
     (setq vc-follow-symlinks t)   
   #+END_SRC
** GUI
   #+BEGIN_SRC emacs-lisp
     (scroll-bar-mode -1)
     (menu-bar-mode -1)
     (tool-bar-mode -1)
   #+END_SRC

** Mode line
   #+BEGIN_SRC emacs-lisp
    ;; Display both line and column numbers in mode line
    (setq line-number-mode t)
    (setq column-number-mode t)
   #+END_SRC

** Behaviour
   #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
    ;; Adds new lines  when moving cursor past the end of the file
    ;; (setq next-line-add-newlines t)
    (setq inhibit-startup-message t)
    ;; Saves the current desktop (stuff that is loaded, window layout etc.)
    ;;   (desktop-save-mode 1)
    ;; don't jump when scrolling past bottom of screen
    (setq scroll-step 1)
    (setq scroll-conservatively 101)
    ;; number of lines from the top/bottom before emacs starts scrolling
    (setq scroll-margin 0)
   #+END_SRC

** Tabs
   #+BEGIN_SRC emacs-lisp
     (setq tab-width 4)
     (setq-default indent-tabs-mode nil) ;; Spaces rather than tabs
   #+END_SRC

** Move backup and autosave files to .emacs.d/{auto-save,backups}
   #+BEGIN_SRC emacs-lisp
   (setq auto-save-file-name-transforms
           `((".*" ,(concat user-emacs-directory "auto-save/") t))) 

   (setq backup-directory-alist
       `(("." . ,(expand-file-name
                  (concat user-emacs-directory "backups")))))
   #+END_SRC
** Fullscreen/Maximised
#+BEGIN_SRC emacs-lisp
  (toggle-frame-maximized)
  ;; (toggle-frame-fullscreen)
#+END_SRC
** Winner
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
* Clear Company Backends List
#+BEGIN_SRC emacs-lisp
(setq company-backends '())
#+END_SRC
* Fonts
#+BEGIN_SRC emacs-lisp
  (set-frame-font "mono 13" nil t)
  (if (string= system-name "yoga")
      (set-default-font "mono 14" nil t))
#+END_SRC
** [[https://github.com/tonsky/FiraCode/wiki/Emacs-instructions][Fira Code Ligature Workaround]]
#+BEGIN_SRC emacs-lisp
(defun fira-code-mode--make-alist (list)
  "Generate prettify-symbols alist from LIST."
  (let ((idx -1))
    (mapcar
     (lambda (s)
       (setq idx (1+ idx))
       (let* ((code (+ #Xe100 idx))
          (width (string-width s))
          (prefix ())
          (suffix '(?\s (Br . Br)))
          (n 1))
     (while (< n width)
       (setq prefix (append prefix '(?\s (Br . Bl))))
       (setq n (1+ n)))
     (cons s (append prefix suffix (list (decode-char 'ucs code))))))
     list)))

(defconst fira-code-mode--ligatures
  '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
    "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
    "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
    "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
    ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
    "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
    "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
    "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
    ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
    "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
    "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
    "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
    "[0-9]\\(x\\)[0-9a-fA-F]" ":" "+" "+" "*"))

(defvar fira-code-mode--old-prettify-alist)

(defun fira-code-mode--enable ()
  "Enable Fira Code ligatures in current buffer."
  (setq-local fira-code-mode--old-prettify-alist prettify-symbols-alist)
  (setq-local prettify-symbols-alist (append (fira-code-mode--make-alist fira-code-mode--ligatures) fira-code-mode--old-prettify-alist))
  (prettify-symbols-mode t))

(defun fira-code-mode--disable ()
  "Disable Fira Code ligatures in current buffer."
  (setq-local prettify-symbols-alist fira-code-mode--old-prettify-alist)
  (prettify-symbols-mode -1))

(define-minor-mode fira-code-mode
  "Fira Code ligatures minor mode"
  :lighter " Fira Code"
  (setq-local prettify-symbols-unprettify-at-point 'right-edge)
  (if fira-code-mode
    (progn 
      (fira-code-mode--setup)
      (fira-code-mode--enable)
    )
    (fira-code-mode--disable)))

(defun fira-code-mode--setup ()
  "Setup Fira Code Symbols"
  (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol"))

(provide 'fira-code-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Make the mode always on and everywhere
  (define-globalized-minor-mode global-fira-code-mode fira-code-mode
    (lambda () (fira-code-mode 1)))

  ;; (global-fira-code-mode 1)
#+END_SRC
* Ace Window
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :defer t
      :ensure t
      :init
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0))))))
  #+END_SRC

* Auto Package Update
  #+BEGIN_SRC emacs-lisp
    ;; Make packages update themselves
    (use-package auto-package-update
      :defer t
      :ensure t
      :config
      (setq auto-package-update-delete-old-versions t)
      (setq auto-package-update-hide-results t)
      (auto-package-update-maybe))
  #+END_SRC  

* Avy
  #+BEGIN_SRC emacs-lisp
    ;; Quick jump to character
    ;; (use-package avy
    ;;   :defer t
    ;;   :disabled
    ;;   :ensure t
    ;;   :bind ("M-s" . avy-goto-word-1))
  #+END_SRC

* C/C++
** lsp (currently disabled as its throwing loads of errors)
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'c-mode-hook 'lsp)
  ;; (add-hook 'c++-mode-hook 'lsp)
#+END_SRC
** Irony
Need to install clang and llvm.
#+BEGIN_SRC emacs-lisp
 (use-package company-irony
 :ensure t
 :config 
 (add-to-list 'company-backends 'company-irony))

 (use-package irony
 :ensure t
 :config
 (add-hook 'c++-mode-hook 'irony-mode)
 (add-hook 'c-mode-hook 'irony-mode)
 (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

 (use-package irony-eldoc
 :ensure t
 :config
 (add-hook 'irony-mode-hook #'irony-eldoc))

#+END_SRC
* Company
  http://company-mode.github.io/
** Config
  #+BEGIN_SRC emacs-lisp
    ;; Auto completion
    (use-package company
      :ensure t
      :bind
      (:map company-active-map
            ("M-n" . nil)
            ("M-p" . nil)
            ("C-n" . company-select-next)
            ("C-p" . company-select-previous))
      :init
       ;; Remove default backends and use the completion at point one.
       ;; This should prevent any weird interactions with lsp-mode
       ;; company-lsp is listed, on the lsp-mode website, as no longer being supported  
       ;; but might be an alternative backend.
        (add-to-list 'company-backends 'company-capf) 
        (global-company-mode t)
      :config
        ;; (setq company-tooltip-limit 40)                        ;; completion list length
        (setq company-idle-delay .3)                           ;; delay before popup shows
        (setq company-echo-delay 0)                            ;; remove annoying blinking
        (setq company-begin-commands '(self-insert-command))  ;; start autocompletion only after typing
        (setq company-minimum-prefix-length 1)
        )
  #+END_SRC
** Company-box
Display icons in completion list.
- https://github.com/sebastiencs/company-box
#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :ensure t
    :init
    (add-hook 'company-mode-hook 'company-box-mode))
#+END_SRC
** Company Go
   #+BEGIN_SRC emacs-lisp
     ;; (use-package company-go
     ;;   :defer t
     ;; :ensure t
     ;; :config
     ;; (add-to-list 'company-backends 'company-go) 
     ;; )
     ;; ;;   (add-hook 'go-mode-hook
     ;; ;
                                             ;     (lambda ()
     ;;       (set (make-local-variable 'company-backends) '(company-go))
     ;;       (company-mode)))
     ;; )
   #+END_SRC

** Company Elisp
   #+BEGIN_SRC emacs-lisp
   
   #+END_SRC

** Rust Racer
[[https://github.com/racer-rust/emacs-racer][installation instructions]]
#+BEGIN_SRC emacs-lisp
  ;; (use-package racer
  ;;   :defer t
  ;; :ensure t
  ;; :init
  ;;   ;; hooks are added here rather than after ":hook" as the required name is "racer-mode"
  ;;   ;; rather than "racer" 
  ;;   (add-hook 'rust-mode-hook #'racer-mode)
  ;;   (add-hook 'racer-mode-hook #'eldoc-mode)
  ;;   (add-hook 'racer-mode-hook #'company-mode)
  ;; :config
  ;;   (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  ;; )
#+END_SRC
* Dumb Jump
    #+BEGIN_SRC emacs-lisp
      (use-package dumb-jump
        :defer t
        :ensure t
        :bind (("M-g o" . dumb-jump-go-other-window)
               ("M-g j" . dumb-jump-go)
               ("M-g i" . dumb-jump-go-prompt)
               ("M-g x" . dumb-jump-go-prefer-external)
               ("M-g z" . dumb-jump-go-prefer-external-other-window))
        :config (setq dumb-jump-selector 'ivy))
    #+END_SRC

* EShell
  #+BEGIN_SRC emacs-lisp
    ;; eshell
    (setq eshell-prompt-regexp "^[^#$\n]*[#$>] "
          eshell-prompt-function
          (lambda () "----> "))
            ;;(propertize "----> " 'face `(:foreground "yellow"))))
  #+END_SRC

* Evil Mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode t)
    (evil-set-initial-state 'term-mode 'emacs)
    (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
  )

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1)
  )

  (use-package evil-snipe
    :ensure t
    :config
    (evil-snipe-mode t)
  )
#+END_SRC
* Flycheck
Syntax checking
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :defer t
  :ensure t
  :init 
      (global-flycheck-mode)
)
#+END_SRC
* GDB
Find the correct functions for the shorcuts below
#+BEGIN_SRC emacs-lisp 
  ;; (use-package gdb
  ;;   ;; :bind
  ;;   ;;   (("C-e" . end-of-line)
  ;;   ;;      ("C-p" . comint-previous-input)
  ;;   ;;      ("C-n" . comint-next-input)
  ;;   ;;      ("C-k" . kill-sentence)
  ;;   ;;      ("C-u" . backward-kill-sentence)
  ;;   ;;      )
  ;; )
#+END_SRC
* Geiser (Scheme stuff)
[[http://www.nongnu.org/geiser/][website]]
** Emacs and scheme talk to each other
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :defer t
    :ensure t)
#+END_SRC
* Go Mode
  #+BEGIN_SRC emacs-lisp
    (use-package go-mode
      :defer t
      :ensure t
      :config
      (add-hook 'before-save-hook 'gofmt-before-save))
  #+END_SRC

* Htmlize
#+BEGIN_SRC emacs-lisp
  (use-package htmlize 
    :defer t
    :ensure t)
#+END_SRC

* Hydra + Key Chords + My Bindings
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t
    :config
    (key-chord-mode 1)
    (setq key-chord-two-keys-delay 0.07))
  (use-package hydra 
    :defer t
    :ensure t)

  ;; C-g 
  (key-chord-define-global "fr" 'keyboard-escape-quit)

  ;; window switching
  (key-chord-define-global "fd" 'next-multiframe-window)

  ;; search
  (key-chord-define-global "ds" 'swiper)

  ;; evil mode
  (key-chord-define-global "jk" 'evil-cond-normal-state)

  ;; to prevent switching into evil-normal-state add the modes name to evil-exclusion-list
  (setq evil-exclusion-list 
  ;;   '(term-mode magit-status-mode racket-repl-mode)
  '()
  )

  (defun evil-cond-normal-state ()
    "Switch to evil normal state unless in certain modes."
    (interactive)
    (if (not (member major-mode evil-exclusion-list)) 
      (evil-normal-state)
  ))

  ;; my hydra tree
  (key-chord-define-global "kl" 'hydra-top/body)

  (defhydra hydra-top (:color blue)
    "Top"
    ("b" hydra-buf/body "buf")
    ("c" comment-or-uncomment-region-or-line "comment")
    ("f" hydra-file/body "file")
    ("g" magit "git")
    ("h" help "help")
    ("i" hydra-insert/body "insert")
    ("j" dumb-jump-go "jump")
    ("l" hydra-lsp/body "lsp")
    ("m" menu-bar-mode "menu")
    ("p" hydra-proj/body "proj")
    ("q" query-replace "q-replace")
    ("r" redraw-display "redraw")
    ("t" (ansi-term "/bin/bash") "ansi")
    ("u" undo-tree-visualize "undo vis")
    ("w" hydra-win/body "win")
    ("x" execute-extended-command "x")
    ("SPC" major-major "maj")
    ("RET" nil))

  (defun major-major () 
    (interactive)
    (pcase major-mode
      ('org-mode (hydra-org/body))
      ('lisp-interaction-mode (hydra-scratch/body))
      ('racket-mode (hydra-racket/body))
      ('python-mode (hydra-python/body))
      ('rust-mode (hydra-rust/body))
  ))

  (defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)
        (next-logical-line)))

   (defhydra hydra-insert (:color blue)
    "Insert"
    ("u" insert-char "unicode hex")
   )

   (defhydra hydra-file (:color blue)
    "File"
    ("f" find-file "find")
    ("s" save-buffer "save")
    ("RET" nil))

  (defhydra hydra-win (:color blue)
    "Win"
    ("b" split-window-below "split below")
    ("r" split-window-right "split right")
    ("d" delete-window "del")
    ("k" delete-other-windows "keep")
    ("s" ace-swap-window "swap")
    ("h" enlarge-window-horizontally "grow horiz" :color red)
    ("H" shrink-window-horizontally "shrink horiz" :color red)
    ("u" winner-undo "undo")
    ("U" winner-redo "un-undo")
    ("v" enlarge-window "grow vert" :color red)
    ("V" shrink-window "shrink vert" :color red)
    ("z" text-scale-increase "zoom" :color red)
    ("Z" text-scale-decrease "unzoom" :color red)
    ("RET" nil))

  (defhydra hydra-buf (:color blue)
    "Buf"
    ("k" kill-buffer "kill")
    ("b" ivy-switch-buffer "buf")
    ("RET" nil))

  (defhydra hydra-proj (:color blue)
    "Proj"
    ("f" projectile-find-file "file")
    ("RET" nil))

  (defhydra hydra-org (:color blue)
    "Org"
    ("b" org-metaleft "left")
    ("f" org-metaright "right")

    ("B" org-metaleft "left" :color red)
    ("F" org-metaright "right" :color red)

    ("c" org-ctrl-c-ctrl-c "C-c C-c")

    ("h" org-insert-heading-respect-content "heading")
    ("i" (progn (org-meta-return) (evil-insert 1)) "insert")


    ("l" org-toggle-latex-fragment "tog latex")
    ("n" org-narrow-to-subtree "narrow")
    ("w" widen "widen")
    ("t" hydra-org-table/body "tables" :exit t)
    ("." org-time-stamp "date")
    ("'" org-edit-special "edit")
    ("RET" nil))

  (defhydra hydra-org-table (:color blue)
    "Table"
    ("o" org-table-toggle-coordinate-overlays "overlay")
    ("c" org-table-insert-column "ins col")
    ("r" org-table-insert-row "ins row")
    ("i" org-table-iterate "iter")
  )

  (defhydra hydra-shell (:color blue)
    "Shell"
    ("a" (ansi-term "/bin/bash") "ansi")
    ("e" eshell "eshell")
    ("RET" nil)
  )

  (defhydra hydra-scratch (:color blue)
    ("e" eval-last-sexp "eval")
  )

  (defhydra hydra-python (:color blue)
    ("d" anaconda-mode-show-doc "doc")
    ("f" hydra-python/find/body "find") 
    ("s" run-python "repl") 
    ("b" python-shell-send-buffer "send buf")
  )

  (defhydra hydra-python/find (:color blue)
    ("a" anaconda-mode-find-assignments "assigs")
    ("d" anaconda-mode-find-definitions "defs")
    ("r" anaconda-mode-find-references "refs")
  )

  (defhydra hydra-rust (:color blue)
    ("j" racer-find-definition "jump")
    ("J" racer-find-definition-other-window "jump win")
    ("b" pop-tag-mark "back")
    ("d" racer-describe "describe")
  )

#+END_SRC
* IBuffer
  #+BEGIN_SRC emacs-lisp
    ;; (defalias 'list-buffers 'ibuffer)
    ;; (setq ibuffer-default-sorting-mode 'major-mode)
  #+END_SRC
* Ido
Completion in minibuffer. I'm using Ivy instead.
  #+BEGIN_SRC emacs-lisp
    ;; (setq ido-enable-flex-matching t)
    ;; (setq ido-everywhere t)
    ;; (ido-mode 1)
  #+END_SRC
  
* Ivy / Counsel / Swiper
** Ivy
  #+BEGIN_SRC emacs-lisp
  (use-package ivy
    :defer t
    :ensure t
    :init 
    (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy)
    )
  #+END_SRC

** Counsel
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :defer t
      :ensure t
      :init
      (counsel-mode t)
    )
  #+END_SRC
  
** Swiper
  #+BEGIN_SRC emacs-lisp
    (use-package swiper
      :defer t
      :ensure t
    )
  #+END_SRC

* Javascript
#+BEGIN_SRC emacs-lisp
  (defun js-mode--setup-lsp () 
    (setq-local lsp-ui-doc-enable nil)
    (setq-local lsp-ui-sideline-show-diagnostics t)
    (setq-local lsp-ui-sideline-show-code-actions nil)
    (setq-local lsp-ui-sideline-show-hover nil)
    (setq-local lsp-ui-sideline-show-symbol nil)
    ;; (setq lsp-ui-sideline-update-mode 'line)
    ;; (setq lsp-ui-sideline-delay 1)
    (lsp)
    )
     
  (defun js-mode--myinit ()
    (js-mode--setup-lsp)
    (setq-local mode-name "js-mode")
    )


  (add-hook 'js-mode-hook #'js-mode--myinit)
#+END_SRC
* LSP Mode
 [[https://emacs-lsp.github.io/lsp-mode/][website]]
 #+BEGIN_SRC emacs-lisp
   ;; set prefix for lsp-commandprefix "C-c l")

   (use-package lsp-mode
       :ensure t
       :hook (;; if you want which-key integration
               (lsp-mode . lsp-enable-which-key-integration))
       :commands lsp 
       :config 

       (defhydra hydra-lsp (:color blue)
         ("i" lsp-ui-imenu "imenu")
         ("d" lsp-ui-doc-show "doc") 
         ("pd" lsp-ui-peek-find-definitions "peek defs")
         ("pr" lsp-ui-peek-find-references "peek refs")
         ("f" lsp-ui-peek-jump-forward "peek forward")
         ("b" lsp-ui-peek-jump-backward "peek backward")
         )
       )

   ;; optionally
   (use-package lsp-ui 
     :ensure t
     :commands lsp-ui-mode
     )
   ;;if you are helm user
   ;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
   ;; if you are ivy user
   (use-package lsp-ivy 
     :ensure t 
     :commands lsp-ivy-workspace-symbol)

   (use-package lsp-treemacs 
     :ensure t 
     :commands lsp-treemacs-errors-list)

   ;; ;; optionally if you want to use debugger
   ;; ;; 
   ;; (use-package dap-mode)
   ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

 #+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit 
    :defer t
    :ensure t
  )
#+END_SRC
* Mode line
[[https://emacs-fu.blogspot.com/2011/08/customizing-mode-line.html][emacs fu modeline tutorial]]
[[https://occasionallycogent.com/custom_emacs_modeline/index.html][occasionally cogent modeline post]]
#+BEGIN_SRC emacs-lisp
   (setq-default mode-line-format
                 '("%e"
                  mode-line-front-space
                  mode-line-mule-info
                  mode-line-client
                  mode-line-modified
                  mode-line-remote
                  mode-line-frame-identification
                  mode-line-buffer-identification
                  "   "
                  mode-line-position 
                  evil-mode-line-tag
                  (vc-mode vc-mode)
                  "  "
                  ;; mode-line-modes
                  mode-name
                  mode-line-misc-info
                  mode-line-end-spaces
                  ))

#+END_SRC
* Org Mode
** Links
   - [[https://orgmode.org/][Website]]
   - [[https://orgmode.org/org.html][Manual]]
   - [[https:orgmode.org/orgcard.pdf][orgcard]]
    
** Notes
*** LaTeX
    https://orgmode.org/worg/org-tutorials/org-latex-preview.html
**** Setup LaTeX preview for formulas
     https://orgmode.org/manual/Embedded-LaTeX.html
     1. Install latex on system
        e.g. the texlive-most pacman group
     2. Makes sure we have dvipng, dvisvgm or convert installed.
        They are included in texlive-most
     3. Toggle between ascii and latex with
        org-toggle-latex-fragment (C-c C-x C-l)
**** Tikz diagrams
- install ghostscript
***** convert: attempt to perform an operation not allowed by the security policy `PDF' @ error/constitute.c/IsCoderAuthorized/408.
- To fix this error it is necessary to change ImageMagick's security policy.
  - Open
    - /etc/ImageMagick/policy.xml
  - Comment out the line 
    - <policy domain="coder" rights="none" pattern="{PS,PS2,PS3,EPS,PDF,XPS}"/>
** Org Bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :defer t
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
 
  (use-package org
    :defer t
    :ensure t
    ;; :bind
    ;; (:map org-mode-map
    ;;       ("C-x C-e" . org-babel-execute-src-block))
    :config
    (setq 
          org-return-follows-link t
          org-confirm-babel-evaluate nil ;; don't prompt before evaluating src blocks
         ;; org-html-doctype "html5"
          org-startup-indented t
          org-use-sub-superscripts '{} ;; requires curly braces around subscripts
          untest "WUTTT"
    ) 
    (visual-line-mode 1)
    

    ;; LaTeX SETUP
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.8)
          org-latex-create-formula-image-program 'imagemagick
    )
    (add-to-list 'org-latex-packages-alist '("" "tikz" t))
    (add-to-list 'org-latex-packages-alist '("" "dsfont" t))

    ;; BABEL 
    (setq geiser-default-implementation 'racket)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (scheme . t) ;; scheme requires emacs geiser package 
  )))
#+END_SRC
* PDF Tools
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :defer t
      :ensure t
      :config
      (pdf-tools-install))
  #+END_SRC

* Projectile
    #+BEGIN_SRC emacs-lisp
      ;; projectile
      (use-package projectile
        :defer t
        :ensure t
        :bind ("C-c p" . projectile-command-map)
        :config
        (setq projectile-global-mode t)
        (setq projectile-completion-system 'ivy))
    #+END_SRC

* Python
Need to install the python language server on the system to get lsp-mode to work.
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'lsp)
#+END_SRC

* Racket Mode
- [[https://www.racket-mode.com/][racket mode manual]]
    #+BEGIN_SRC emacs-lisp
      (use-package racket-mode
        :defer t
        :ensure t
        :hook
        (racket-mode . (lambda () (add-to-list 'prettify-symbols-alist '("lambda" . 955))))
        :bind
        (:map racket-repl-mode-map
           ("C-e" . end-of-line)
           ("C-p" . comint-previous-input)
           ("C-n" . comint-next-input)
           ("C-k" . kill-sentence)
           ("C-u" . backward-kill-sentence)
           )
        :init
        (add-to-list 'auto-mode-alist '("\\.rkt\\'" . racket-mode))
        :config
        (evil-insert-state)
        (setq tab-always-indent 'complete)
        (defhydra hydra-racket (:color blue)
          ("c" comment-or-uncomment-region-or-line "comment")
          ("d" racket-describe "describe")
          ("e" racket-eval-last-sexp "eval")
          ("r" racket-run "run")
          ("s" racket-send-last-sexp "send")
          ("RET" nil)))

    #+END_SRC
    
* Rust Mode
to get lsp to work
- rustup update
- rustup component add rls rust-analysis rust-src
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :defer t
    :ensure t
    :init
      (add-hook 'rust-mode-hook 'lsp)
    :config 
      (setq rust-format-on-save t)
  )

  ;; provides compatablity between flycheck and cargo projects
  ;; (use-package flycheck-rust
  ;;   :defer t
  ;; :ensure t
  ;; :config 
  ;;   (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
  ;; )
#+END_SRC
  
* Themes
#+BEGIN_SRC emacs-lisp
    (use-package gruvbox-theme 
      :defer t
      :ensure t
      :init
      (load-theme 'gruvbox-dark-hard t))
#+END_SRC

* Try
  #+BEGIN_SRC emacs-lisp
    (use-package try 
      :defer t
      :ensure t)
  #+END_SRC

* Visual line mode
  #+BEGIN_SRC emacs-lisp
  (use-package visual-line-mode
    :defer t
      :hook org-mode)
  #+END_SRC
* Which Key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config
      (which-key-mode))
  #+END_SRC

* Workgroups2
Save window and buffer layouts.
#+BEGIN_SRC emacs-lisp
  ;; (use-package workgroups2
  ;;   :defer t
  ;;   :ensure t
  ;;   :init
  ;;   (setq wg-session-load-on-start nil)
  ;;   (setq wg-emacs-exit-save-behaviour nil)
  ;;   (setq wg-workgroups-mode-exit-save-behavior nil)
  ;;   (setq wg-mode-line-display-on nil)  ;; set to t to show workgroup info in mode line
  ;;   (workgroups-mode 1)
  ;; )
  ;; (defhydra hydra-layout (:color blue)
  ;;   ("c" wg-create-workgroup "create")
  ;;   ("k" wg-kill-workgroup "kill")
  ;;   ("n" wg-rename-workgroup "name")
  ;;   ("r" wg-reload-session "reload")
  ;;   ("ss" wg-save-session "save default")
  ;;   ("w" wg-switch-to-workgroup "workgroup")
  ;; )
#+END_SRC
